+x ` # + ... perform replacement in a loop
     # x ... free-spacing mode to allow for comments

# This performs the computation of a 2-tag system on the input.
# The input should be of the form
#
#     initial|rule1,rule2,...,ruleN
#
# Where <initial> is the initial word and the <ruleI> are of the form
#
#     firstLetter>production
#
# Note that this implementation is limited to the alphabet matching \w.
# An example input could be
#
#     baa|a>ccbaH,b>cca,c>cc
#
# Where H is the halting character.

# The pattern consists of two parts. The first one will perform one
# production on the word as long as a valid production can be found.
# The second one will remove the productions if the first one fails
# to match, such that the result will be left with only the halting
# word.
# Note that the replacement string is simply
#
#     $2$3

^          # Anchor the match to the beginning of the string.
(.).       # Match the first two characters, capturing the first one
           # in group <1>. This is why it's a 2-tag system.
(\w*)      # Capture the rest of the current word into group <2>.
(?=        # Lookahead - this is not part of the match.
  \|.*     # Match the | delimiter and search for the first letter.
  \1       # Match the first letter.
  >        # Match the >.
  (\w*)    # Capture the production into group <3>.
)          # End of lookahead.
           # You can see the match replaces the entire word with
           # everything but the first two letters, plus the
           # production.

|          # OR (if no production was found).

^          # Anchor the match to the beginning of the string.

(?<2>\w+)  # Capture the entire word into group <2>
.*         # Match the rest of the string.

           # This simply removes everything that didn't go into
           # group <2>. Group <3> just remains empty.